shiny::runApp()
install.packages("QurvE", repos = "https://cloud.r-project.org")
install.packages("shiny", repos = "https://cloud.r-project.org")
library(shiny)
#library(shinythemes)
library(QurvE) # may give error if some dependencies are not installed (in my experience)
# make a histogram of the first column
output$plot1 <- renderPlot({
req(input$go)
df <- isolate(my_data())
num_cols <- sapply(df, is.numeric)
if (any(num_cols)) {
hist(
df[[ which(num_cols)[1] ]],
main = "Histogram of First Column",
xlab = names(df)[which(num_cols)[1]]
)
} else {
plot.new()
text(0.5, 0.5, "No columns to plot")
}
})
# Reactive expression to load and preprocess data
my_data <- reactive({
req(input$datafile)
df <- read.csv(input$datafile$datapath, stringsAsFactors = FALSE)
# preprocessing steps
# df
})
# make the uploaded data a table (when "Run Analysis" is clicked)
output$datatable <- renderTable({
req(input$go)
isolate(my_data())
})
server <- function(input, output, session) {
# Reactive expression to load and preprocess data
my_data <- reactive({
req(input$datafile)
df <- read.csv(input$datafile$datapath, stringsAsFactors = FALSE)
# preprocessing steps
# df
})
# make the uploaded data a table (when "Run Analysis" is clicked)
output$datatable <- renderTable({
req(input$go)
isolate(my_data())
})
# make a histogram of the first column
output$plot1 <- renderPlot({
req(input$go)
df <- isolate(my_data())
num_cols <- sapply(df, is.numeric)
if (any(num_cols)) {
hist(
df[[ which(num_cols)[1] ]],
main = "Histogram of First Column",
xlab = names(df)[which(num_cols)[1]]
)
} else {
plot.new()
text(0.5, 0.5, "No columns to plot")
}
})
#Â make a fluorescence analysis plot using QurvE
output$plot2 <- renderPlot({
req(input$go)
df <- isolate(my_data())
num_cols <- sapply(df, is.numeric)
if (any(num_cols)) {
# assuming the first numeric column is fluorescence data
fluorescence_data <- df[[ which(num_cols)[1] ]]
time_points <- seq_along(fluorescence_data) # replace with actual time points if available
# perform fluorescence analysis using QurvE # not sure if this is correct
result <- growth.gcFit(time = rnd.fluorescence_data$time,
data = rnd.fluorescence_data$data,
parallelize = FALSE,
control = growth.control(suppress.messages = TRUE,
fit.opt = 's'))
# plot the result
plot(result)
} else {
plot.new()
text(0.5, 0.5, "No columns to plot")
}
})
}
install.packages("shiny", repos = "https://cloud.r-project.org")
# Load required packages
library(QurvE)
# ---- Load and preprocess data ----
# Replace this path with your actual CSV file
data_path <- "C:/iGEM/dry-lab-crikit/RShiny/data.csv"
# Read the CSV file
df <- read.csv(data_path, stringsAsFactors = FALSE)
# Show the first few rows
cat("First few rows of the data:\n")
print(head(df))
# ---- Plot histogram of the first numeric column ----
numeric_cols <- sapply(df, is.numeric)
if (any(numeric_cols)) {
first_numeric_col <- df[[ which(numeric_cols)[1] ]]
hist(first_numeric_col,
main = "Histogram of First Column",
xlab = names(df)[which(numeric_cols)[1]])
} else {
cat("No numeric columns found for histogram.\n")
}
# ---- Fluorescence analysis using QurvE ----
if (any(numeric_cols)) {
fluorescence_data <- df[[ which(numeric_cols)[1] ]]
time_points <- seq_along(fluorescence_data)
# Format the data as required by QurvE
fluorescence_df <- data.frame(time = time_points, data = fluorescence_data)
# Perform growth curve fitting
result <- growth.gcFit(
time = fluorescence_df$time,
data = fluorescence_df$data,
parallelize = FALSE,
control = growth.control(
suppress.messages = TRUE,
fit.opt = "s"
)
)
# Plot result
plot(result)
} else {
cat("No numeric columns found for QurvE analysis.\n")
}
print(numeric_cols)
df[[ which(numeric_cols)[1] ]]
# Load required packages
library(QurvE)
# ---- Load and preprocess data ----
# Replace this path with your actual CSV file
data_path <- "C:/iGEM/dry-lab-crikit/RShiny/data.csv"
# Read the CSV file
df <- read.csv(data_path, stringsAsFactors = FALSE)
# Show the first few rows
cat("First few rows of the data:\n")
print(head(df))
# ---- Plot histogram of the first numeric column ----
numeric_cols <- sapply(df, is.numeric)
if (any(numeric_cols)) {
first_numeric_col <- df[[ which(numeric_cols)[1] ]]
hist(first_numeric_col,
main = "Histogram of First Column",
xlab = names(df)[which(numeric_cols)[1]])
} else {
cat("No numeric columns found for histogram.\n")
}
# ---- Fluorescence analysis using QurvE ----
if (any(numeric_cols)) {
fluorescence_data <- df[[ which(numeric_cols)[1] ]]
time_points <- seq_along(fluorescence_data)
# Format the data as required by QurvE
fluorescence_df <- data.frame(time = time_points, data = fluorescence_data)
# Perform growth curve fitting
result <- growth.gcFit(
time = fluorescence_df$time,
data = fluorescence_df$data,
parallelize = FALSE,
control = growth.control(
suppress.messages = TRUE,
fit.opt = "s"
)
)
# Plot result
plot(result)
} else {
cat("No numeric columns found for QurvE analysis.\n")
}
# Load required packages
library(QurvE)
# ---- Load and preprocess data ----
# Replace this path with your actual CSV file
data_path <- "C:/iGEM/dry-lab-crikit/RShiny/data.csv"
# Read the CSV file
df <- read.csv(data_path, stringsAsFactors = FALSE)
# Show the first few rows
cat("First few rows of the data:\n")
print(head(df))
# ---- Plot histogram of the first numeric column ----
numeric_cols <- sapply(df, is.numeric)
if (any(numeric_cols)) {
first_numeric_col <- df[[ which(numeric_cols)[1] ]]
hist(first_numeric_col,
main = "Histogram of First Column",
xlab = names(df)[which(numeric_cols)[1]])
} else {
cat("No numeric columns found for histogram.\n")
}
# ---- Fluorescence analysis using QurvE ----
if (any(numeric_cols)) {
fluorescence_data <- df[[ which(numeric_cols)[1] ]]
time_points <- seq_along(fluorescence_data)
# QurvE expects data as a matrix with replicates in rows
fluorescence_matrix <- matrix(fluorescence_data, nrow = 1)
# Perform growth curve fitting
result <- growth.gcFit(
time = time_points,
data = fluorescence_matrix,
parallelize = FALSE,
control = growth.control(
suppress.messages = TRUE,
fit.opt = "s"
)
)
# Plot the result
plot(result)
} else {
cat("No numeric columns found for QurvE analysis.\n")
}
# Load required packages
library(QurvE)
# ---- Load and preprocess data ----
# Replace this path with your actual CSV file
data_path <- "C:/iGEM/dry-lab-crikit/RShiny/data.csv"
# Read the CSV file
df <- read.csv(data_path, stringsAsFactors = FALSE)
# Show the first few rows
cat("First few rows of the data:\n")
print(head(df))
# ---- Plot histogram of the first numeric column ----
numeric_cols <- sapply(df, is.numeric)
if (any(numeric_cols)) {
first_numeric_col <- df[[ which(numeric_cols)[1] ]]
hist(first_numeric_col,
main = "Histogram of First Column",
xlab = names(df)[which(numeric_cols)[1]])
} else {
cat("No numeric columns found for histogram.\n")
}
# ---- Fluorescence analysis using QurvE ----
if (any(numeric_cols)) {
fluorescence_data <- df[[ which(numeric_cols)[1] ]]
time_points <- seq_along(fluorescence_data)
# QurvE expects data as a matrix with replicates in rows
fluorescence_matrix <- matrix(fluorescence_data, nrow = 1)
# Perform growth curve fitting
result <- growth.gcFit(
time = time_points,
data = fluorescence_matrix,
parallelize = FALSE,
control = growth.control(
suppress.messages = TRUE,
fit.opt = "s"
)
)
# Plot the result
plot(result)
} else {
cat("No numeric columns found for QurvE analysis.\n")
}
# Load required packages
library(QurvE)
# ---- Load and preprocess data ----
# Replace this path with your actual CSV file
data_path <- "C:/iGEM/dry-lab-crikit/RShiny/data.csv"
# Read the CSV file
df <- read.csv(data_path, stringsAsFactors = FALSE)
# Show the first few rows
cat("First few rows of the data:\n")
print(head(df))
# ---- Plot histogram of the first numeric column ----
numeric_cols <- sapply(df, is.numeric)
if (any(numeric_cols)) {
first_numeric_col <- df[[ which(numeric_cols)[1] ]]
hist(first_numeric_col,
main = "Histogram of First Column",
xlab = names(df)[which(numeric_cols)[1]])
} else {
cat("No numeric columns found for histogram.\n")
}
# ---- Fluorescence analysis using QurvE ----
if (any(numeric_cols)) {
fluorescence_data <- df[[ which(numeric_cols)[1] ]]
time_points <- seq_along(fluorescence_data)
# Remove NA values (optional but often necessary)
if (any(is.na(fluorescence_data))) {
cat("Warning: NA values found. Removing them.\n")
valid_indices <- which(!is.na(fluorescence_data))
fluorescence_data <- fluorescence_data[valid_indices]
time_points <- time_points[valid_indices]
}
# QurvE expects data as a matrix: rows = replicates, columns = time points
fluorescence_matrix <- matrix(fluorescence_data, nrow = 1)
# Now fit the curve
result <- growth.gcFit(
time = time_points,  # This can remain a vector
data = fluorescence_matrix,
parallelize = FALSE,
control = growth.control(
suppress.messages = TRUE,
fit.opt = "s"
)
)
# Plot the result
plot(result)
} else {
cat("No numeric columns found for QurvE analysis.\n")
}
shiny::runApp()
